x[1,"ingredients"]
x[2,"ingredients"]
class(x[2,"ingredients"])
gsug(x = as.character(x[2,"ingredients"]), pattern = "Aloe", x = "XXXXXXXXXXX")
gsub(x = as.character(x[2,"ingredients"]), pattern = "Aloe", x = "XXXXXXXXXXX")
str = x[2,"ingredients"]
str
class(str)
str = as.character(str)
class(str)
str
gsub(x = str, pattern = "Aloe", replacement = "XXXXXXX")
x[,2]
x = grepl("Aloe", ulta$ingredients)
len(x[x==TRUE])
length(x[x==TRUE])
# look for all products with "Aloe" listed in the ingredients
Aloe = ulta[grepl("Aloe", ulta$ingredients),c('brand_name',
'product_name', 'ingredients')]
sum(x, na.rm=TRUE)
sum(x)
unique(ulta$brand_name)
ingredient_list[1:10]
ingredient_list[1:30]
# look for all products with "Aloe" listed in the ingredients
Aloe = ulta[grepl(">Aloe Barbadensis Leaf Extract", ulta$ingredients),c('brand_name',
'product_name', 'ingredients')]
dim(Aloe)
Aloe
names(ulta)
# look for all products with "Aloe" listed in the ingredients
Aloe = ulta[grepl(">Aloe Barbadensis Leaf Extract", ulta$ingredients),c('brand_name',
'product_name', 'ingredients',
'url')]
Aloe
# look for all products with "Aloe" listed in the ingredients
Aloe = ulta[grepl("[+/- (MAY CONTAIN/PEUT CONTENIR): Iron Oxides/CI 77491", ulta$ingredients),c('brand_name',
'product_name', 'ingredients',
'url')]
# look for all products with "Aloe" listed in the ingredients
Aloe =
ulta[grepl("[+/- (MAY CONTAIN/PEUT CONTENIR): Iron Oxides/CI 77491",
ulta$ingredients, fixed = TRUE),c('brand_name',
'product_name',
'ingredients',
'url'),]
Aloe
# look for all products with "Aloe" listed in the ingredients
Aloe =
ulta[grepl("Aloe",
ulta$ingredients, fixed = TRUE),c('brand_name',
'product_name',
'ingredients',
'url'),]
Aloe
setwd("~/Desktop/NYCDSA/projects/web_scraping_project/
exploring_beauty_products/data/")
ingredient_list[1:30]
write.csv(ingredient_list, file = "temp_ingredient_list.csv")
getwd()
li = read.csv("temp_ingredient_list.csv")
li[1:10,]
li$X = nULL
li$X = NULL
li[1:10,]
li = li[order(li)]
names(li)
li = li[order(li$x)]
li = li[order(li$x),]
li[1:10]
li$x[1:30]
li[1:30,]
li[1:30]
ulta = read.csv("ulta_skincare.csv")
ulta$source = "ulta.com"
ulta$source = "www.ulta.com"
dim(ulta)
len(unique(ulta$product_name))
length(unique(ulta$product_name))
12298 - 12143
length(unique(ulta$ingredients))
dim(unique(ulta))
library(dplyr)
x = ulta %>% group_by(., product_name, ingredients) %>% summarise(., count = n())
dim(x)
y = x %>% filter(., count > 1)
dim(y)
select(y, product_name)
y
ulta = read.csv("ulta_skincare.csv")
ulta$source = "www.ulta.com"
dim(ulta)
##### Remove duplicates (prods with same name and ingredients)
dupes = ulta %>%
group_by(., brand_name, product_name, ingredients) %>%
summarise(., cnt = n()) %>%
filter(., cnt >1)
dim(dupes)
dupes
dupes[4]
dupes[4,]
filter(ulta, product_name == "Blue Ridge Wildflower Hand Cream") %>% select(-ingredients)
dupes[1,]
dupes[2,]
filter(ulta, product_name == "Online Only Anti-Blemish Facial Wash") %>% select(-ingredients)
dupes[3,]
filter(ulta, product_name == "Deep Cleansing Pore Strips") %>%
select(-ingredients)
# remove duplicates
dupe_names = dupes[,"product_name"]
dupe_names
dupes
?match
match(dupe_names, ulta$product_name)
match("Blue Ridge Wildflower Hand Cream", ulta$product_name)
dupe_names
match(dupe_names$product_name, ulta$product_name)
test = ulta[1:10,]
test$product_name
ulta = ulta[-to_remove,]
dupe_names = dupes[,"product_name"]
to_remove = match(dupe_names$product_name, ulta$product_name)
ulta = ulta[-to_remove,]
dim(ulta)
dupes = ulta %>%
group_by(., brand_name, product_name, ingredients) %>%
summarise(., cnt = n()) %>%
filter(., cnt >1)
dupes
getwd()
ulta = read.csv("ulta_skincare.csv")
ulta$source = "www.ulta.com"
dim(ulta)
# what are the dupes?
dupes = ulta %>%
group_by(., brand_name, product_name, ingredients) %>%
summarise(., cnt = n()) %>%
filter(., cnt >1)
dupe_names = dupes[,"product_name"]
to_remove = match(dupe_names$product_name, ulta$product_name)
ulta = ulta[-to_remove,]
dim(ulta)
12298 - 12278
length(unique(ulta$product_name))
12278 - 12143
brand_and_name = select(ulta, brand_name, product_name)
dim(brand_and_name)
unique(brand_and_name)
length(unique(brand_and_name))
dim(brand_and_name)
dim(unique(brand_and_name))
by_prod = ulta %>% group_by(product_name, brand_name) %>% summarise(., cnt = n()) %>% arrange(., desc(cnt))
by_prod
brand_and_name[brand_and_name$product_name == "Luxe Aromatherapy Shower Tablets "]
brand_and_name[brand_and_name$product_name == "Luxe Aromatherapy Shower Tablets ",]
brand_and_name[brand_and_name$product_name == "Luxe Aromatherapy Shower Tablets",]
ulta[ulta$product_name == "Luxe Aromatherapy Shower Tablets",]
ulta[ulta$product_name == "100% Extra Virgin Coconut Oil",]
dim(by_prod)
dim(filter(by_prod, cnt=1))
dim(filter(by_prod, cnt==1))
dim(ulta)
12278 - 12227
ulta[ulta$product_name == "Luxe Aromatherapy Shower Tablets",
c("product_name", "ingredients","url")]
ulta[ulta$product_name == "100% Virgin Coconut Oil Daily Hydration
Conditioner",c("product_name", "ingredients","url")]
ulta[ulta$product_name ==
"100% Virgin Coconut Oil Daily Hydration Conditioner",
c("product_name", "ingredients","url")]
by_prod
ulta[ulta$product_name == "Bamboo Style Cleanse Extend Translucent Dry Shampoo",
c("product_name", "ingredients","url")]
ulta[ulta$product_name == "Black Sugar Perfect Splash Mask",
c("product_name", "ingredients","url")]
ulta[ulta$product_name == "Natural Mineral Water Facial Spray",
c("product_name", "ingredients","url")]
has_ing = filter(ulta, ingredients != "None")
dim(has_ing)
ulta = read.csv("ulta_skincare.csv")
ulta$source = "www.ulta.com"
dim(ulta)
ulta = filter(ulta, ingredients != "None")
dim(ulta)
# what are the dupes?
dupes = ulta %>%
group_by(., brand_name, product_name, ingredients) %>%
summarise(., cnt = n()) %>%
filter(., cnt >1)
dim(dupes)
dupe_names = dupes[,"product_name"]
to_remove = match(dupe_names$product_name, ulta$product_name)
ulta = ulta[-to_remove,]
dim(ulta)
# what about ones with different ingredients?
by_prod = ulta %>%
group_by(product_name, brand_name) %>%
summarise(., cnt = n()) %>%
arrange(., desc(cnt))
by_prod
dim(filter(by_prod, cnt > 1))
dupes2 = filter(by_prod, cnt > 1)
write.csv(dupes2, "possible dupes.csv")
dupe_names2 = dupes2[,"product_name"]
test = match(dupe_names2$product_name, ulta$product_name)
dim(test)
test
test = ulta[test,]
dim(test)
write.csv(test, "possible dupes.csv")
dupes2 = filter(ulta, product_name %in% by_prod$product_name)
dim(dupes2)
dupes2 = filter(by_prod, cnt > 1)
opt = filter(ulta, product_name %in% dupes2$product_name)
dim(opt)
write.csv(opt, "possible dupes.csv")
dim(ulta)
50/11289*100
50/11289
dupe_names = dupes[,"product_name"]
dupe_names
match(dupes$product_name, ulta$product_name)
# write.csv(opt, "possible dupes.csv")
to_remove2 = match(dupes2$product_name, ulta$product_name)
ulta = ulta[-to_remove,]
ulta = read.csv("ulta_skincare.csv")
ulta$source = "www.ulta.com"
dim(ulta)
ulta = filter(ulta, ingredients != "None")
dim(ulta)
# what are the dupes?
dupes = ulta %>%
group_by(., brand_name, product_name, ingredients) %>%
summarise(., cnt = n()) %>%
filter(., cnt >1)
dim(dupes)
# remove duplicates
to_remove = match(dupes$product_name, ulta$product_name)
length(to_remove)
ulta = ulta[-to_remove,]
dim(ulta)
11289+18
# what about ones with different ingredients?
# <50 rows (<0.5% of sample)
# upon visual inspection they tend to be pretty close, keep the 1st occur.
# of each
by_prod = ulta %>%
group_by(product_name, brand_name) %>%
summarise(., cnt = n()) %>%
arrange(., desc(cnt))
dupes2 = filter(by_prod, cnt > 1)
to_remove2 = match(dupes2$product_name, ulta$product_name)
to_remove2
length(to_remove2)
dim(dupes2)
ulta = ulta[-to_remove,]
dim(ulta)
dim(ulta)[1] + 46
dim(ulta)[1]
dim(ulta)[1] - 11289
ulta = read.csv("ulta_skincare.csv")
ulta$source = "www.ulta.com"
dim(ulta)
##### Remove anything without ingredients
ulta = filter(ulta, ingredients != "None")
dim(ulta)
##### Remove duplicates (prods with same name and ingredients)
# what are the dupes?
dupes = ulta %>%
group_by(., brand_name, product_name, ingredients) %>%
summarise(., cnt = n()) %>%
filter(., cnt >1)
# confirm what's causing them by looking at a few examples
# we see that these are the same products, just in different sizes and
# sometimes with slightly different descriptions; since this investigation
# is around ingredients, we're good to consolidate them
#
# filter(ulta, product_name == "Blue Ridge Wildflower Hand Cream") %>%
#   select(-ingredients)
# filter(ulta, product_name == "Online Only Anti-Blemish Facial Wash") %>%
#   select(-ingredients)
# filter(ulta, product_name == "Deep Cleansing Pore Strips") %>%
#   select(-ingredients)
# remove duplicates
to_remove = match(dupes$product_name, ulta$product_name)
ulta = ulta[-to_remove,]
# what about ones with different ingredients?
by_prod = ulta %>%
group_by(product_name, brand_name) %>%
summarise(., cnt = n()) %>%
arrange(., desc(cnt))
dupes2 = filter(by_prod, cnt > 1)
# <50 rows (<0.5% of sample)
# upon visual inspection they tend to be pretty close, keep the 1st
# occurence of each
#opt = filter(ulta, product_name %in% dupes2$product_name)
# write.csv(opt, "possible dupes.csv")
to_remove2 = match(dupes2$product_name, ulta$product_name)
ulta = ulta[-to_remove2,]
dim(ulta)
dim(ulta)[1]+46
# write the cleaned data to a fresh csv
write.csv(ulta, "ulta_cleaned.csv")
dim(ulta)
ulta = filter(ulta, ingredients != "None")
dim(ulta)
# Extract just ingredients
all_ingredients = ulta$ingredients
length(all_ingredients)
length(unique(all_ingredients))
?unique
# Extract just ingredients
all_ingredients = unique(ulta$ingredients)
length(all_ingredients)
all_ingredients[1:10]
clean_and_split = function(input){
opt = strsplit(x = as.character(input), split = ",") # split by comma
return(opt)
}
all_ingredients = lapply(all_ingredients, clean_and_split)
all_ingredients[1:3]
# flatten into a list of unique ingredients
ingredient_list = do.call(c, unlist(all_ingredients, recursive = FALSE))
ingredient_list[1:10]
ingredient_list = unique(ingredient_list)
ingredient_list = gsub(x = ingredient_list, pattern = '\n',
replacement = "", fixed = TRUE)
ingredient_list = gsub(x = ingredient_list, pattern = '.',
replacement = "", fixed = TRUE)
ingredient_list = trimws(ingredient_list, which = "left")
ingredient_list[1:10]
ingredient_list = unique(ingredient_list)
ingredient_list[1:10]
length(ingredient_list)
il = ingredient_list
sort(il)[1:10]
ingredient_list[1:10]
write.csv(ingredient_list, "all ingredients.csv")
str = "  [+/- May contain/Peut Contenir CI 77891 (Titanium Dioxide)"
gsub(x = str, pattern = "\t")
gsub(x = str, pattern = "\t", replacement = "XXXXX")
gsub(x = str, pattern = "  ", replacement = "XXXXX")
trimws(str)
grep(ingredient_list, "  ")
grep(x = ingredient_list, pattern = "  ")
ingredient_list[705]
ingredient_list = gsub(x = ingredient_list, pattern = '  ',
replacement = "", fixed = TRUE)
grep(ingredient_list, "  ")
grep(x = ingredient_list, pattern = "  ")
sort(ingredient_list)[1:10]
grep(x = ingredient_list, pattern = "  ")
gsub(x = "  [+/- May contain/Peut Contenir CI 77891 (Titanium Dioxide)", pattern = "  ", replacement = "XXXX")
grep(x = ingredient_list, pattern = "]n")
grep(x = ingredient_list, pattern = "\n")
all_ingredients = unique(ulta$ingredients)
# split by commas
clean_and_split = function(input){
opt = strsplit(x = as.character(input), split = ",") # split by comma
return(opt)
}
all_ingredients = lapply(all_ingredients, clean_and_split)
all_ingredients[1:3]
# flatten into a list of unique ingredients
ingredient_list = do.call(c, unlist(all_ingredients, recursive = FALSE))
ingredient_list = gsub(x = ingredient_list, pattern = '\n',
replacement = "", fixed = TRUE)
ingredient_list = gsub(x = ingredient_list, pattern = '.',
replacement = "", fixed = TRUE)
ingredient_list = trimws(ingredient_list, which = "both")
ingredient_list[1:10]
sort(ingredient_list[1:10])
sort(ingredient_list)[1:10]
x = sort(ingredient_list)
x[1:10]
x
x = unique(x)
x[1:10]
y = x[1:10]
gsub("  ","XXX",y)
trimws(y)
class(y)
trimws(y[3])
gsub("  ", "X",y[3])
z = y[3]
gsub("  ", "X",z)
trimws(z, which="both")
x[1:30]
?trimws
y = x[1:30]
sapply(y, trimws)
apply(y, trimws)
apply(x = y, FUN = trimws)
apply(X = y, FUN = trimws)
lapply(y, trimws)
clean <- function(str){
str = gsub(x = str, pattern = '\n',
replacement = "", fixed = TRUE)
str = gsub(x = str, pattern = '.',
replacement = "", fixed = TRUE)
str = trimws(str, which="both")
}
y[1]
y[3]
str = "  [+/- May contain/Peut Contenir CI 77891 (Titanium Dioxide)"
clean(str)
clean <- function(str){
str = gsub(x = str, pattern = '\n',
replacement = "", fixed = TRUE)
str = gsub(x = str, pattern = '.',
replacement = "", fixed = TRUE)
str = trimws(str, which="both")
return(str)
}
clean(str)
y
z = lapply(y, clean)
unlist(z)
z
z[[1]]
y
# Extract just ingredients
all_ingredients = unique(ulta$ingredients)
split = function(input){
opt = strsplit(x = as.character(input), split = ",") # split by comma
return(opt)
}
all_ingredients = lapply(all_ingredients, split)
all_ingredients[1:3]
# flatten into a list of unique ingredients
ingredient_list = do.call(c, unlist(all_ingredients, recursive = FALSE))
all_ingredients[1:3]
ingredient_list[1:10]
ingredient_list = trimws(ingredient_list, which = "both")
ingredient_list[1:10]
length(ingredient_list)
grep(ingredient_list, "  ")
grep(x = ingredient_list, pattern = "  ")
x = grep(x = ingredient_list, pattern = "  ")
y = ingredient_list[x]
length(y)
y[1:10]
str = "  test this \n..  "
clean(str)
x
ingredient_list = clean(ingredient_list)
sort(ingredient_list)[1:10]
sort(unique(ingredient_list))[1:10]
clean("  [+/- May contain/Peut Contenir CI 77891 (Titanium Dioxide)")
clean(sort(unique(ingredient_list))[3])
clean <- function(str){
str = gsub(x = str, pattern = '\n', replacement = "", fixed = TRUE)
str = gsub(x = str, pattern = '\t', replacement = "", fixed = FALSE)
str = gsub(x = str, pattern = '.', replacement = "", fixed = TRUE)
str = trimws(str, which="both")
return(str)
}
clean(sort(unique(ingredient_list))[3])
gsub(pattern = "  ", replacement = "", x = sort(unique(ingredient_list))[3])
gsub(pattern = "\t", replacement = "", x = sort(unique(ingredient_list))[3])
gsub(pattern = "  ", replacement = "", x = sort(unique(ingredient_list))[3])
gsub(pattern = " ", replacement = "", x = sort(unique(ingredient_list))[3])
class(sort(unique(ingredient_list))[3])
sub("^\\s+", "", sort(unique(ingredient_list))[3])
clean <- function(str){
str = gsub(x = str, pattern = '\n', replacement = "", fixed = TRUE)
str = gsub(x = str, pattern = '\t', replacement = "", fixed = FALSE)
str = gsub(x = str, pattern = '.', replacement = "", fixed = TRUE)
str = sub("^\\s+", "", str)
str = trimws(str, which="both")
return(str)
}
ingredient_list = clean(ingredient_list)
sort(unique(ingredient_list))[1:10]
clean <- function(str){
str = gsub(x = str, pattern = '\n', replacement = "", fixed = TRUE)
str = gsub(x = str, pattern = '\t', replacement = "", fixed = FALSE)
str = gsub(x = str, pattern = '.', replacement = "", fixed = TRUE)
str = gsub("^\\s+", "", str)
str = trimws(str, which="both")
return(str)
}
# Extract just ingredients
all_ingredients = unique(ulta$ingredients)
split = function(input){
opt = strsplit(x = as.character(input), split = ",") # split by comma
return(opt)
}
all_ingredients = lapply(all_ingredients, split)
# flatten into a list of unique ingredients
ingredient_list = do.call(c, unlist(all_ingredients, recursive = FALSE))
clean <- function(str){
str = gsub(x = str, pattern = '\n', replacement = "", fixed = TRUE)
str = gsub(x = str, pattern = '.', replacement = "", fixed = TRUE)
str = gsub(x = str, pattern = '*', replacement = "", fixed = TRUE)
str = gsub(x = str, pattern = "¿", replacement ="", fixed = TRUE)
str = gsub(x = str, pattern = "[+/- ", replacement ="", fixed = TRUE)
str = gsub(x = str, pattern = "^\\s+", replacement = "")
str = trimws(str, which="both")
return(str)
}
ingredient_list = clean(ingredient_list)
ingredient_list = sort(unique(ingredient_list))
ingredient_list[1:10]
length(ingredient_list)
write.csv(ingredient_list, "all ingredients.csv")
ingredient_list[grep(x = ingredient_list, pattern="May Contian")]
ingredient_list[grep(x = ingredient_list, pattern="contain")]
ingredient_list[grep(x = ingredient_list, pattern="May contain")]
x = all_ingredients[1:5]
x
grep("May contain", x)
